/**
 * Unit tests for the `Strings` library.
 *
 * @author Jackson Ray Hamilton
 */
class StringsTests {

  function void equals_SameString_True() {
    do UnitTest.assertTrue("same strings", Strings.equals("abc", "abc"));
    do UnitTest.assertTrue("same strings", Strings.equals("defghi", "defghi"));
    return;
  }

  function void equals_DifferentStrings_False() {
    do UnitTest.assertFalse("different strings", Strings.equals("abc", "def"));
    do UnitTest.assertFalse("different strings",
                            Strings.equals("defghi", "abcdef"));
    return;
  }

  function void clone_VariousLengths_Cloned() {
    do UnitTest.assertStringEquals("cloned", "",
                                   Strings.clone(""));
    do UnitTest.assertStringEquals("cloned", "a",
                                   Strings.clone("a"));
    do UnitTest.assertStringEquals("cloned", "ab",
                                   Strings.clone("ab"));
    return;
  }

  function void coerceInt_DifferingSizes_CorrectStringSize() {
    do UnitTest.assertStringEquals("coerce int to string", "0",
                                   Strings.coerceInt(0));
    do UnitTest.assertStringEquals("coerce int to string", "1",
                                   Strings.coerceInt(1));
    do UnitTest.assertStringEquals("coerce int to string", "10",
                                   Strings.coerceInt(10));
    do UnitTest.assertStringEquals("coerce int to string", "100",
                                   Strings.coerceInt(100));
    do UnitTest.assertStringEquals("coerce int to string", "-1",
                                   Strings.coerceInt(-1));
    do UnitTest.assertStringEquals("coerce int to string", "-10",
                                   Strings.coerceInt(-10));
    do UnitTest.assertStringEquals("coerce int to string", "-100",
                                   Strings.coerceInt(-100));
    return;
  }

  function void coerceChar_DifferentChars_CorrectRepresentation() {
    do UnitTest.assertStringEquals("coerce char to string", "!",
                                   Strings.coerceChar(33));
    do UnitTest.assertStringEquals("coerce char to string",
                                   Strings.coerceChar(String.doubleQuote()),
                                   Strings.coerceChar(34));
    do UnitTest.assertStringEquals("coerce char to string", "A",
                                   Strings.coerceChar(65));
    return;
  }

  function void concat_DifferingLengths_CorrectlyConcatenated() {
    do UnitTest.assertStringEquals("concat strings", "seashells",
                                   Strings.concat("sea", "shells"));
    do UnitTest.assertStringEquals("concat to one empty string", "b",
                                   Strings.concat("", "b"));
    do UnitTest.assertStringEquals("concat to one empty string", "a",
                                   Strings.concat("a", ""));
    do UnitTest.assertStringEquals("concat empty strings", "",
                                   Strings.concat("", ""));
    return;
  }

  function void join_VariousLengths_CorrectlyJoined() {
    var Array arr;

    let arr = Array.new(5);
    let arr[0] = "uno";
    let arr[1] = "dos";
    let arr[2] = "tres";
    let arr[3] = "cuatro";
    let arr[4] = "cinco";

    do UnitTest.assertStringEquals("join strings",
                                   "uno, dos, tres, cuatro, cinco",
                                   Strings.join(arr, 5, ", "));
    do UnitTest.assertStringEquals("join strings", "unodostrescuatrocinco",
                                   Strings.join(arr, 5, ""));

    do arr.dispose();

    let arr = Array.new(1);
    let arr[0] = "I am the one who knocks.";

    do UnitTest.assertStringEquals("join single string",
                                   "I am the one who knocks.",
                                   Strings.join(arr, 1, "asdf"));

    do arr.dispose();

    return;
  }

  function void substring_DifferingRanges_CorrectSubstring() {
    var String testString;
    var int testStringLength;

    let testString = "abcdefg";
    let testStringLength = testString.length();

    do UnitTest.assertStringEquals("substring", "a",
                                   Strings.substring(testString, 0, 1));
    do UnitTest.assertStringEquals("substring", "",
                                   Strings.substring(testString, 0, 0));
    do UnitTest.assertStringEquals("substring", "ab",
                                   Strings.substring(testString, 0, 2));
    do UnitTest.assertStringEquals("substring", "abcdefg",
                                   Strings.substring(testString, 0,
                                                     testStringLength));
    do UnitTest.assertStringEquals("substring", "efg",
                                   Strings.substring(testString, 4,
                                                     testStringLength));

    do UnitTest.assertStringEquals("substring reverse indices", "a",
                                   Strings.substring(testString, 1, 0));
    do UnitTest.assertStringEquals("substring out of bounds", "a",
                                   Strings.substring(testString, -1, 1));
    do UnitTest.assertStringEquals("substring out of bounds", "abcdefg",
                                   Strings.substring(testString, 0,
                                                     testStringLength + 1));
    do UnitTest.assertStringEquals("substring out of bounds", "abcdefg",
                                   Strings.substring(testString, -1,
                                                     testStringLength + 1));
    do UnitTest.assertStringEquals("substring reverse indices out of bounds",
                                   "abcdefg",
                                   Strings.substring(testString,
                                                     testStringLength + 1, -1));

    return;
  }

  function void indexOf_DifferingSubstringSizes_CorrectIndex() {
    var String emptyString;
    var String testString;

    let emptyString = "";
    let testString = "abcdefg";

    do UnitTest.assertIntEquals("indexOf", 0,
                                    Strings.indexOf(emptyString, "", 0));
    do UnitTest.assertIntEquals("indexOf", -1,
                                    Strings.indexOf(emptyString, "", 1));
    do UnitTest.assertIntEquals("indexOf", 0,
                                    Strings.indexOf(testString, "", 0));
    do UnitTest.assertIntEquals("indexOf", 1,
                                    Strings.indexOf(testString, "", 1));
    do UnitTest.assertIntEquals("indexOf", 0,
                                    Strings.indexOf(testString, "a", 0));
    do UnitTest.assertIntEquals("indexOf", 1,
                                    Strings.indexOf(testString, "b", 0));
    do UnitTest.assertIntEquals("indexOf", 0,
                                    Strings.indexOf(testString, "ab", 0));
    do UnitTest.assertIntEquals("indexOf", 1,
                                    Strings.indexOf(testString, "bc", 0));
    do UnitTest.assertIntEquals("indexOf not found", -1,
                                    Strings.indexOf(testString, "hijkl", 0));
    do UnitTest.assertIntEquals("indexOf not found", -1,
                                    Strings.indexOf(testString, "a", 1));

    return;
  }

  function void count_CountEmptyStrings_CorrectCounts() {
    do UnitTest.assertIntEquals("empty string in empty string", 1, Strings.count("", ""));
    do UnitTest.assertIntEquals("empty strings in string", 2, Strings.count(" ", ""));
    return;
  }

  function void count_VaryingCounts_CorrectCounts() {
    do UnitTest.assertIntEquals("count 0 d", 0, Strings.count("abc", "d"));
    do UnitTest.assertIntEquals("count 1 a", 1, Strings.count("abc", "a"));
    do UnitTest.assertIntEquals("count 1 b", 1, Strings.count("abc", "b"));
    do UnitTest.assertIntEquals("count 1 c", 1, Strings.count("abc", "c"));
    do UnitTest.assertIntEquals("count 1 ab", 1, Strings.count("abc", "ab"));
    do UnitTest.assertIntEquals("count 1 bc", 1, Strings.count("abc", "bc"));
    do UnitTest.assertIntEquals("count 1 abc", 1, Strings.count("abc", "abc"));
    do UnitTest.assertIntEquals("count 2 a", 2, Strings.count("abcabc", "a"));
    do UnitTest.assertIntEquals("count 2 b", 2, Strings.count("abcabc", "b"));
    do UnitTest.assertIntEquals("count 2 c", 2, Strings.count("abcabc", "c"));
    do UnitTest.assertIntEquals("count 2 ab", 2, Strings.count("abcabc", "ab"));
    do UnitTest.assertIntEquals("count 1 ca", 1, Strings.count("abcabc", "ca"));
    do UnitTest.assertIntEquals("count 2 bc", 2, Strings.count("abcabc", "bc"));
    do UnitTest.assertIntEquals("count 2 abc", 2, Strings.count("abcabc", "abc"));
    do UnitTest.assertIntEquals("count 0 abcd", 0, Strings.count("abcabc", "abcd"));
    return;
  }

  function void split_VaryingDelimiterCounts_CorrectlySplit() {
    var Array result;

    let result = Strings.split("ape", "");
    do UnitTest.assertStringEquals("substring 0", "a", result[0]);
    do UnitTest.assertStringEquals("substring 1", "p", result[1]);
    do UnitTest.assertStringEquals("substring 2", "e", result[2]);

    let result = Strings.split("ape", ", ");
    do UnitTest.assertStringEquals("only substring", "ape", result[0]);

    let result = Strings.split("ape, baboon", ", ");
    do UnitTest.assertStringEquals("substring 0", "ape", result[0]);
    do UnitTest.assertStringEquals("substring 1", "baboon", result[1]);

    let result = Strings.split("ape, baboon, chimp", ", ");
    do UnitTest.assertStringEquals("substring 0", "ape", result[0]);
    do UnitTest.assertStringEquals("substring 1", "baboon", result[1]);
    do UnitTest.assertStringEquals("substring 2", "chimp", result[2]);

    let result = Strings.split("ape, baboon, chimp, ", ", ");
    do UnitTest.assertStringEquals("substring 0", "ape", result[0]);
    do UnitTest.assertStringEquals("substring 1", "baboon", result[1]);
    do UnitTest.assertStringEquals("substring 2", "chimp", result[2]);
    do UnitTest.assertStringEquals("substring 3", "", result[3]);

    return;
  }

  function void sprintf_NoTags_SameString() {
    var Array arr;

    let arr = Array.new(1);
    let arr[0] = "";

    do UnitTest.assertStringEquals("no tags; interpolate nothing",
                                   "yo yo yo",
                                   Strings.sprintf("yo yo yo", arr));

    do arr.dispose();

    return;
  }

  function void sprintf_DifferentIndices_CorrectInterpolation() {
    var Array arr;

    let arr = Array.new(3);
    let arr[0] = "a";
    let arr[1] = "b";
    let arr[2] = "c";

    do UnitTest.assertStringEquals("interpolate",
                                   "a",
                                   Strings.sprintf("%s", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   "a ",
                                   Strings.sprintf("%s ", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   " a",
                                   Strings.sprintf(" %s", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   "ab",
                                   Strings.sprintf("%s%s", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   "ab ",
                                   Strings.sprintf("%s%s ", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   " ab",
                                   Strings.sprintf(" %s%s", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   " ab ",
                                   Strings.sprintf(" %s%s ", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   "a b",
                                   Strings.sprintf("%s %s", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   "a b ",
                                   Strings.sprintf("%s %s ", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   " a b",
                                   Strings.sprintf(" %s %s", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   " a b ",
                                   Strings.sprintf(" %s %s ", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   "a b c",
                                   Strings.sprintf("%s %s %s", arr));

    let arr[0] = "ab";
    let arr[1] = "cd";
    let arr[2] = "ef";

    do UnitTest.assertStringEquals("interpolate",
                                   "ab",
                                   Strings.sprintf("%s", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   "ab ",
                                   Strings.sprintf("%s ", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   " ab",
                                   Strings.sprintf(" %s", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   "abcd",
                                   Strings.sprintf("%s%s", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   "abcd ",
                                   Strings.sprintf("%s%s ", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   " abcd",
                                   Strings.sprintf(" %s%s", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   " abcd ",
                                   Strings.sprintf(" %s%s ", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   "ab cd",
                                   Strings.sprintf("%s %s", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   "ab cd ",
                                   Strings.sprintf("%s %s ", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   " ab cd",
                                   Strings.sprintf(" %s %s", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   " ab cd ",
                                   Strings.sprintf(" %s %s ", arr));
    do UnitTest.assertStringEquals("interpolate",
                                   "ab cd ef",
                                   Strings.sprintf("%s %s %s", arr));

    do arr.dispose();

    return;
  }

  function void sprintf_NumerousTypes_CorrectInterpolation() {
    var Array arr;

    let arr = Array.new(3);
    let arr[0] = "a";
    let arr[1] = 10;

    do UnitTest.assertStringEquals("interpolate values",
                                   "a10",
                                   Strings.sprintf("%s%i", arr));

    let arr[0] = 10;
    let arr[1] = "a";

    do UnitTest.assertStringEquals("interpolate values",
                                   "10a",
                                   Strings.sprintf("%d%s", arr));

    let arr[0] = -20;
    let arr[1] = 20;

    do UnitTest.assertStringEquals("interpolate values",
                                   "-2020",
                                   Strings.sprintf("%i%i", arr));

    let arr[0] = "";
    let arr[1] = Strings.parseChar("!");
    let arr[2] = Strings.parseChar("!");

    do UnitTest.assertStringEquals("interpolate values",
                                   "33!",
                                   Strings.sprintf("%s%i%c", arr));

    let arr[0] = "quick";
    let arr[1] = 42;
    let arr[2] = Strings.parseChar(".");

    do UnitTest.assertStringEquals("interpolate values",
                                   "A quick fox jumps over 42 dogs.",
                                   Strings.sprintf(
                                     "A %s fox jumps over %i dogs%c", arr));

    do arr.dispose();

    return;
  }

  function void runTests() {
    do StringsTests.equals_SameString_True();
    do StringsTests.equals_DifferentStrings_False();
    do StringsTests.clone_VariousLengths_Cloned();
    do StringsTests.coerceInt_DifferingSizes_CorrectStringSize();
    do StringsTests.coerceChar_DifferentChars_CorrectRepresentation();
    do StringsTests.concat_DifferingLengths_CorrectlyConcatenated();
    do StringsTests.join_VariousLengths_CorrectlyJoined();
    do StringsTests.substring_DifferingRanges_CorrectSubstring();
    do StringsTests.indexOf_DifferingSubstringSizes_CorrectIndex();
    do StringsTests.count_CountEmptyStrings_CorrectCounts();
    do StringsTests.count_VaryingCounts_CorrectCounts();
    do StringsTests.split_VaryingDelimiterCounts_CorrectlySplit();
    do StringsTests.sprintf_NoTags_SameString();
    do StringsTests.sprintf_DifferentIndices_CorrectInterpolation();
    do StringsTests.sprintf_NumerousTypes_CorrectInterpolation();
    return;
  }

}
